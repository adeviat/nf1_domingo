{"version":3,"sources":["Server.js","dataProvider.js","Dashboard.js","authProvider.js","StoreList.js","ProductList.js","App.js","serviceWorker.js","index.js"],"names":["post","url","data","a","async","options","method","body","JSON","stringify","headers","Headers","Accept","mode","fetch","then","response","status","console","log","statusText","json","Promise","reject","apiUrl","httpClient","fetchUtils","fetchJson","getList","resource","params","pagination","page","perPage","sort","field","order","query","range","filter","products","total","numOfProducts","stores","totalStores","create","name","description","price","photo","store_id","id","catch","error","update","put","product","getOne","dataJSON","get","delete","deleteItem","_a","Card","CardHeader","title","CardContent","authProvider","login","username","password","email","token","localStorage","setItem","logout","removeItem","resolve","checkAuth","getItem","getPermissions","PostPagination","props","Pagination","rowsPerPageOptions","StoreList","List","Datagrid","TextField","source","ShowButton","EditButton","StoreEdit","Edit","SimpleForm","StoreShow","Show","SimpleShowLayout","ProductList","UrlField","ProductCreate","Create","TextInput","ProductEdit","App","Admin","dashboard","Dashboard","dataProvider","Resource","list","edit","show","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8b182fb.chunk.js","sourcesContent":["\nexport const put = async (url,data) => {\n\n\n    const options = {\n        method: 'PUT',\n        body: JSON.stringify(data),\n        headers: new Headers({\n            Accept: 'application/json',\n            'Content-type': 'application/json',\n\n\n        }),\n        mode: 'cors',\n    };\n\n    return fetch('http://127.0.0.1/'+url, options)\n        .then(response => {\n\n            if(response.status === 200) {\n                console.log(response.statusText);\n                return response.json();\n            }\n\n            console.log(response.statusText);\n            return Promise.reject(response.status);\n        })\n\n};\n\n\n\nexport const post = async (url,data) => {\n\n\n    const options = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: new Headers({\n            Accept: 'application/json',\n            'Content-type': 'application/json',\n\n\n        }),\n        mode: 'cors',\n    };\n\n    return fetch('http://127.0.0.1/'+url, options)\n        .then(response => {\n\n            if(response.status === 200) {\n                console.log(response.statusText);\n                return response.json();\n            }\n\n            console.log(response.statusText);\n            return Promise.reject(response.status);\n        })\n\n};\n\nexport const deleteItem = async (url) => {\n\n\n    const options = {\n        method: 'DELETE',\n        headers: new Headers({\n            Accept: 'application/json',\n            'Content-type': 'application/json',\n\n\n        }),\n        mode: 'cors',\n    };\n\n    return fetch('http://127.0.0.1/'+url, options)\n        .then(response => {\n\n            if(response.status === 200) {\n                console.log(response.statusText);\n                return response.json();\n            }\n\n            console.log(response.statusText);\n            return Promise.reject(response.status);\n        })\n\n};\nexport const get = async (url) => {\n\n\n    const options = {\n        method: 'GET',\n        headers: new Headers({\n            Accept: 'application/json',\n            'Content-type': 'application/json',\n\n\n        }),\n        mode: 'cors',\n    };\n\n    const data =   await fetch('http://127.0.0.1/'+url, options)\n        .then(  response => {\n\n            if(response.status === 200) {\n                console.log(response.statusText);\n                return response;\n            }\n\n            console.log(response.statusText);\n            Promise.reject(response.status);\n        });\n    const dataJSON = await data.json();\n\n    return dataJSON;\n\n};\n\n","import { fetchUtils } from 'react-admin';\nimport { stringify } from 'query-string';\nimport {get, post, put, deleteItem} from \"./Server\";\n\nconst apiUrl = 'http://127.0.0.1:80/api';\nconst httpClient = fetchUtils.fetchJson;\nconst addProduct = 'api/product/create';\nconst editProduct = 'api/product/update';\nconst getProduct = 'api/product/';\nconst deleteProduct = 'api/product/'\nconst getStore = '/store/1';\n\n\n\n\n\nexport default {\n    getList: (resource, params) => {\n        switch(resource){\n            case 'products': {\n                const {page, perPage} = params.pagination;\n                const {field, order} = params.sort;\n                const query = {\n                    sort: JSON.stringify([field, order]),\n                    range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n                    filter: JSON.stringify(params.filter),\n                };\n                const url = apiUrl + \"/\" + resource + \"?\" + stringify(query);\n\n                return httpClient(url).then(({headers, json}) => ({\n                    data: json.products,\n                    total: json.numOfProducts\n                }));\n\n            }\n            case 'stores': {\n                const {page, perPage} = params.pagination;\n                const {field, order} = params.sort;\n                const query = {\n                    sort: JSON.stringify([field, order]),\n                    range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n                    filter: JSON.stringify(params.filter),\n                };\n                const url = apiUrl + getStore;\n\n                return httpClient(url).then(({headers, json}) => ({\n                    data: json.stores,\n                    total: json.totalStores\n                }));\n\n            }\n\n        }\n\n    },\n    create: (resource, params) =>{\n        switch (resource) {\n            case 'products': {\n\n                const data = {\n                    name: params.data.name,\n                    description: params.data.description,\n                    price: params.data.price,\n                    photo:params.data.photo,\n                    store_id: 1\n                }\n\n                return post(addProduct,data)\n                .then(response => ({\n                    data: { ...params.data, id: response.id }\n                }))\n                .catch(error => {\n                    console.log(error);\n\n                });\n            }\n        }\n    },\n    update: (resource, params) => {\n        debugger;\n        const data = {\n            id: params.data.id,\n            name: params.data.name,\n            description: params.data.description,\n            price: params.data.price,\n            photo:params.data.photo,\n            store_id: 1\n        }\n        return put(editProduct,data)\n            .then(response =>({\n                data: response.product\n            }))\n            .catch(error =>{\n                console.log(error);\n            });\n    },\n    getOne: (resource,params) => {\n\n        return get(getProduct + params.id)\n            .then(response => ({\n\n                data:response\n            }))\n\n    },\n    delete: function (resource, params) {\n        return deleteItem(deleteProduct + params.id)\n            .then(function (_a) {\n            var json = _a.json;\n            return ({ data: json });\n        });\n    },\n}\n//total: parseInt(headers.get('content-range').split('/').pop(), 10)","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nexport default () => (\n    <Card>\n    <CardHeader title=\"Welcome to Domingo Store Managment\" />\n        <CardContent>On this platform, you can manage your store </CardContent>\n</Card>\n);","import {post} from \"./Server\";\n\n\nconst authProvider = {\n    login: ({ username, password }) =>  {\n        const url  = 'api/user/login';\n        const data = {\n            email: username,\n            password: password\n        };\n        return post(url,data)\n            .then(({ token }) => {\n                localStorage.setItem('token', token);\n            });\n    },\n    logout: () => {\n        localStorage.removeItem('token');\n        return Promise.resolve();\n    },\n    checkAuth: () => {\n        return localStorage.getItem('token')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    getPermissions: () => Promise.resolve(),\n\n};\n\nexport default authProvider;","import React from 'react';\nimport { Pagination,List, Datagrid, TextField, SimpleShowLayout,Show,EditButton,ShowButton, Create, Edit,SimpleForm,SelectInput,TextInput,ReferenceInput, UrlField } from 'react-admin';\n\n\nconst PostPagination = props => <Pagination rowsPerPageOptions={[]} {...props} />;\n\nexport const StoreList = (props) => (\n    <List {...props} title=\"Stores\" pagination={<PostPagination/>} >\n        <Datagrid >\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"address\" />\n            <TextField source=\"postcode\" />\n            <ShowButton />\n            <EditButton />\n        </Datagrid>\n    </List>\n);\nexport const StoreEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextField source=\"name\" />\n            <TextField source=\"address\" />\n            <TextField source=\"postcode\" />\n        </SimpleForm>\n    </Edit>\n);\nexport const StoreShow= props => (\n    <Show title=\"name\" {...props} >\n        <SimpleShowLayout>\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"address\" />\n            <TextField source=\"postcode\" />\n            <EditButton />\n        </SimpleShowLayout>\n    </Show>\n);\n\n","import React from 'react';\nimport { Pagination,List, Datagrid, TextField, EditButton, Create, Edit,SimpleForm,SelectInput,TextInput,ReferenceInput, UrlField } from 'react-admin';\n\n\nconst PostPagination = props => <Pagination rowsPerPageOptions={[]} {...props} />;\n\nexport const ProductList = (props) => (\n    <List {...props} title=\"Products\" pagination={<PostPagination/>} >\n        <Datagrid >\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"description\" />\n            <TextField source=\"price\" />\n            <UrlField source=\"photo\" />\n            <EditButton  />\n        </Datagrid>\n    </List>\n);\n\nexport const ProductCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n            <TextInput source=\"price\" />\n            <TextInput source=\"description\" />\n            <TextInput source=\"photo\" />\n        </SimpleForm>\n    </Create>\n);\n\nexport const ProductEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n            <TextInput source=\"price\" />\n            <TextInput source=\"description\" />\n            <TextInput source=\"photo\" />\n        </SimpleForm>\n    </Edit>\n\n);\n","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from \"./dataProvider\";\nimport Dashboard from \"./Dashboard\";\nimport authProvider from \"./authProvider\";\nimport {StoreEdit, StoreList, StoreShow} from \"./StoreList\";\nimport { ProductList, ProductCreate,ProductEdit } from './ProductList';\n\n\nconst App = () => (\n    <Admin dashboard={Dashboard} authProvider={authProvider} dataProvider={dataProvider}>\n        <Resource name=\"stores\" list={StoreList} edit={StoreEdit} show={StoreShow} />\n        <Resource name=\"products\" list={ProductList} create={ProductCreate}  edit={ProductEdit} />\n\n    </Admin>\n);\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}